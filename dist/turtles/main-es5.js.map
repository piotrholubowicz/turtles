{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/board/board.component.ts","webpack:///src/app/board/board.component.html","webpack:///src/app/card/card.component.ts","webpack:///src/app/card/card.component.html","webpack:///src/app/color-picker-dialog/color-picker-dialog.component.ts","webpack:///src/app/color-picker-dialog/color-picker-dialog.component.html","webpack:///src/app/game-engine.ts","webpack:///src/app/game-over/game-over.component.ts","webpack:///src/app/game-over/game-over.component.html","webpack:///src/app/game.service.ts","webpack:///src/app/game.ts","webpack:///src/app/games/games.component.ts","webpack:///src/app/games/games.component.html","webpack:///src/app/image.service.ts","webpack:///src/app/in-memory-data.service.ts","webpack:///src/app/page-not-found/page-not-found.component.ts","webpack:///src/app/page-not-found/page-not-found.component.html","webpack:///src/app/player/player.component.ts","webpack:///src/app/player/player.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","name","selector","templateUrl","styleUrls","AppModule","provide","useValue","declarations","bootstrap","providers","entryComponents","BoardComponent","route","router","service","imageService","modalService","allColors","RED","YELLOW","BLUE","PURPLE","GREEN","Color","game$","paramMap","pipe","params","getGame","get","game","winner","gameOver","result","console","log","addGame","createGame","shuffle","players","subscribe","newGame","navigate","err","status","message","color","getTurtlePath","x","fieldAndPos","findPosition","y","field","pos","z","modalRef","open","componentInstance","colors","getMoveCardPath","cardIdx","i","CardComponent","played","enabled","emit","play","src","ColorPickerDialogComponent","activeModal","formBuilder","createForm","colorPickerFormGroup","group","required","close","value","submitForm","GameEngine","length","filter","item","index","indexOf","turtles","deck","Array","from","playersToTurtles","forEach","player","pop","playersToHands","splice","undefined","hands","discarded","board","last_move","active_player","next_game_id","distance","ANY","c","LAST","find","f","makeMove","useCard","reshuffleIfNecessary","nextPlayer","stackSize","landingField","Math","min","landingPos","stack","concat","start","end","handIdx","findIndex","push","Object","p","a","j","floor","random","GameOverComponent","getTurtleCardPath","GameService","http","gamesUrl","cache","headers","url","_","fetchUrl","bufferSize","refCount","operation","set","observe","resp","body","handleError","currentGame","post","g","put","fallback","error","providedIn","ALL_CARDS","GamesComponent","games$","getGames","playersInput","input","map","trim","deleteGame","ImageService","PREFIX","card","toLowerCase","sign","which","InMemoryDataService","games","max","PageNotFoundComponent","PlayerComponent","ColorT","turtleCardSrc$","turtleCardSrc","event","colorOptions","defineColors","cantPlayCard","pickOneColor","playTheCard","playCard","JSON","stringify","updateGame","environment","production"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { GamesComponent } from './games/games.component';\nimport { BoardComponent } from './board/board.component';\nimport { PlayerComponent } from './player/player.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/games', pathMatch: 'full' },\n  { path: 'games', component: GamesComponent },\n  { path: 'board/:id', component: BoardComponent },\n  { path: 'hand/:id/:player', component: PlayerComponent },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  name = 'Turtles';\n\n  constructor() {}\n}\n","<router-outlet></router-outlet>\n\n<a href=\"http://www.freepik.com\" style=\"color: #eeeeee; font-size: 8pt; float: right\"\n  >Designed by rawpixel.com / Freepik</a\n>\n","import { NgModule } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService } from './in-memory-data.service';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { GameService } from './game.service';\nimport { GamesComponent } from './games/games.component';\nimport { BoardComponent } from './board/board.component';\nimport { PlayerComponent } from './player/player.component';\nimport { CardComponent } from './card/card.component';\nimport { ColorPickerDialogComponent } from './color-picker-dialog/color-picker-dialog.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { ImageService } from './image.service';\nimport { GameOverComponent } from './game-over/game-over.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    NgbModule,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when a real server is ready to receive requests.\n    // HttpClientInMemoryWebApiModule.forRoot(\n    //   InMemoryDataService, { dataEncapsulation: false }\n    // )\n  ],\n  declarations: [\n    AppComponent,\n    GamesComponent,\n    BoardComponent,\n    PlayerComponent,\n    CardComponent,\n    ColorPickerDialogComponent,\n    PageNotFoundComponent,\n    GameOverComponent,\n  ],\n  bootstrap: [AppComponent],\n  providers: [{ provide: APP_BASE_HREF, useValue: '/turtles/' }, GameService, InMemoryDataService, ImageService],\n  entryComponents: [ColorPickerDialogComponent, GameOverComponent],\n})\nexport class AppModule {}\n","import { Observable } from 'rxjs';\nimport { switchMap, catchError, tap } from 'rxjs/operators';\n\nimport { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router, ParamMap } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Game, Color, Card, ALL_CARDS } from '../game';\nimport { GameEngine } from '../game-engine';\nimport { GameService } from '../game.service';\nimport { ImageService } from '../image.service';\nimport { GameOverComponent } from '../game-over/game-over.component';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css'],\n})\nexport class BoardComponent implements OnInit {\n  game$: Observable<Game>;\n  allColors: Color[] = [Color.RED, Color.YELLOW, Color.BLUE, Color.PURPLE, Color.GREEN];\n  Color = Color;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private service: GameService,\n    private imageService: ImageService,\n    private modalService: NgbModal\n  ) {}\n\n  ngOnInit(): void {\n    this.game$ = this.route.paramMap.pipe(\n      switchMap((params: ParamMap) => {\n        return this.service.getGame(+params.get('id')).pipe(\n          tap((game) => {\n            if (game.winner) {\n              this.gameOver(game).then((result) => {\n                if (result === 'onemore') {\n                  console.log('once more!');\n                  this.service\n                    .addGame(GameEngine.createGame(GameEngine.shuffle([...game.players])), game)\n                    .subscribe((newGame) => {\n                      this.router.navigate(['/board', newGame.id]);\n                    });\n                }\n              });\n            }\n          }),\n          catchError((err) => {\n            if (err.status === 404) {\n              this.router.navigate(['/games', { message: 'Nie ma takiej gry!' }]);\n            }\n            console.log(`Error ${err.status}`);\n            return this.game$;\n          })\n        );\n      })\n    );\n  }\n\n  turtleSrc(color: Color): string {\n    return this.imageService.getTurtlePath(color);\n  }\n\n  left(game: Game, color: Color): string {\n    const x = [80, 76, 67, 58, 50, 41, 32, 25, 15, 8];\n    const fieldAndPos = GameEngine.findPosition(game, color);\n\n    if (fieldAndPos[0] === 0) {\n      return `${x[0] + 1.7 * color}%`;\n    }\n\n    return `${x[fieldAndPos[0]]}%`;\n  }\n\n  top(game: Game, color: Color): string {\n    const y = [20, 50, 57, 51, 34, 27, 40, 57, 49, 35];\n    const fieldAndPos = GameEngine.findPosition(game, color);\n    const field = fieldAndPos[0];\n    const pos = fieldAndPos[1];\n\n    if (field === 0) {\n      return `${y[0] + 15 * color}%`;\n    }\n\n    // height of a meeple is 5%\n    return `${y[field] - pos * 5}%`;\n  }\n\n  zindex(game: Game, color: Color): string {\n    const z = [0, 1, 2, 3, 2, 1, 2, 3, 2, 1];\n    const fieldAndPos = GameEngine.findPosition(game, color);\n\n    if (fieldAndPos[0] === 0) {\n      return `${color}`;\n    }\n\n    return `${10 * z[fieldAndPos[0]] + fieldAndPos[1]}`;\n  }\n\n  gameOver(game: Game): Promise<any> {\n    const modalRef = this.modalService.open(GameOverComponent);\n    modalRef.componentInstance.winner = game.winner;\n    modalRef.componentInstance.color = game.colors[game.winner];\n    return modalRef.result;\n  }\n\n  cardBackSrc(): string {\n    return this.imageService.getMoveCardPath();\n  }\n\n  cardFrontSrc(cardIdx: number): string {\n    return this.imageService.getMoveCardPath(ALL_CARDS[cardIdx]);\n  }\n\n  leftMoveCard(i: number): string {\n    return `${20 + i}%`;\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <a href=\"/\"><img src=\"/assets/img/title.png\" /></a>\n    </div>\n  </div>\n  <div *ngIf=\"game$ | async as game\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <p class=\"players\">\n          <span *ngFor=\"let p of game.players\" [ngClass]=\"{ active_player: game.players[game.active_player] == p }\"\n            >{{ p }},\n          </span>\n        </p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <img class=\"board\" src=\"/assets/img/board.png\" />\n        <img\n          *ngFor=\"let c of allColors\"\n          class=\"meeple\"\n          src=\"{{ turtleSrc(c) }}\"\n          [style.left]=\"left(game, c)\"\n          [style.top]=\"top(game, c)\"\n          [style.z-index]=\"zindex(game, c)\"\n        />\n      </div>\n    </div>\n    <div class=\"row card-row\">\n      <div class=\"col-6\">\n        <img\n          *ngFor=\"let card of game.deck; let i = index\"\n          class=\"movecard\"\n          src=\"{{ cardBackSrc() }}\"\n          [style.left]=\"leftMoveCard(i)\"\n        />\n      </div>\n      <div class=\"col-6\">\n        <img\n          *ngFor=\"let card of game.discarded; let i = index\"\n          class=\"movecard\"\n          src=\"{{ cardFrontSrc(card) }}\"\n          [style.left]=\"leftMoveCard(i)\"\n        />\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col\">\n        <p>Kliknij na swoje imię, aby zobaczyć swoje karty:</p>\n        <a\n          *ngFor=\"let player of game.players\"\n          type=\"button\"\n          class=\"btn btn-secondary btn-player\"\n          [routerLink]=\"['/hand', game.id, player]\"\n        >\n          {{ player }}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ImageService } from '../image.service';\nimport { Game, Card, Color, ALL_CARDS } from '../game';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css']\n})\nexport class CardComponent implements OnInit {\n  @Input() game: Game;\n  @Input() cardIdx: number;\n  @Input() enabled: boolean;\n  @Output() played = new EventEmitter<{ cardIdx: number; game: Game }>();\n  Color = Color;\n\n  constructor(private modalService: NgbModal, private imageService: ImageService) {}\n\n  ngOnInit() {}\n\n  card(): Card {\n    return ALL_CARDS[this.cardIdx];\n  }\n\n  play(): void {\n    if (this.enabled) {\n      this.played.emit({ cardIdx: this.cardIdx, game: this.game });\n    }\n  }\n\n  src(): string {\n    return this.imageService.getMoveCardPath(ALL_CARDS[this.cardIdx]);\n  }\n}\n","<a (click)=\"play()\"><img src=\"{{ src() }}\" class=\"movecard\"/></a>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Color } from '../game';\nimport { ImageService } from '../image.service';\n\n@Component({\n  selector: 'app-color-picker-dialog',\n  templateUrl: './color-picker-dialog.component.html',\n  styleUrls: ['./color-picker-dialog.component.css']\n})\nexport class ColorPickerDialogComponent implements OnInit {\n  @Input() colors: Color[];\n  colorPickerFormGroup: FormGroup;\n  Color = Color;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private formBuilder: FormBuilder,\n    private imageService: ImageService\n  ) {\n    this.createForm();\n  }\n\n  private createForm() {\n    this.colorPickerFormGroup = this.formBuilder.group({\n      color: ['', [Validators.required]]\n    });\n  }\n\n  public submitForm() {\n    this.activeModal.close(this.colorPickerFormGroup.value);\n  }\n\n  turtleSrc(color: Color): string {\n    return this.imageService.getTurtlePath(color);\n  }\n\n  ngOnInit() {}\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title\">Wybierz żółwia</h4>\n  <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</div>\n\n<form [formGroup]=\"colorPickerFormGroup\" (ngSubmit)=\"submitForm()\">\n  <div class=\"modal-body\">\n    <div class=\"container\">\n      <p>Którego żółwia chcesz przesunąć?</p>\n      <div class=\"form-row\">\n        <div *ngFor=\"let color of colors\" class=\"col\">\n          <input\n            class=\"form-check-input\"\n            type=\"radio\"\n            name=\"color\"\n            id=\"{{ color }}\"\n            value=\"{{ color }}\"\n            formControlName=\"color\"\n            required\n          />\n          <label class=\"form-check-label\" for=\"{{ color }}\"\n            ><img style=\"width: 80%;\" src=\"{{ turtleSrc(color) }}\"\n          /></label>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-primary\" [disabled]=\"!colorPickerFormGroup.valid\">\n      OK\n    </button>\n  </div>\n</form>\n","import { Game, Color, Card, ALL_CARDS } from './game';\n\nexport class GameEngine {\n  static createGame(players: string[]): Game {\n    if (players.length < 2) {\n      console.log('too few players');\n      return;\n    }\n    if (players.filter((item, index) => players.indexOf(item) !== index).length > 0) {\n      console.log(\"names can't repeat\");\n      return;\n    }\n    const turtles = [Color.BLUE, Color.GREEN, Color.PURPLE, Color.RED, Color.YELLOW];\n    GameEngine.shuffle(turtles);\n    const deck = Array.from(ALL_CARDS.keys()); // shallow copy\n    GameEngine.shuffle(deck);\n\n    const playersToTurtles: { [id: string]: Color } = {};\n    players.forEach((player) => (playersToTurtles[player] = turtles.pop()));\n    const playersToHands: { [id: string]: number[] } = {};\n    players.forEach((player) => (playersToHands[player] = deck.splice(0, 5)));\n\n    return {\n      id: undefined,\n      players,\n      colors: playersToTurtles,\n      hands: playersToHands,\n      deck,\n      discarded: [],\n      board: [[Color.RED, Color.GREEN, Color.PURPLE, Color.YELLOW, Color.BLUE], [], [], [], [], [], [], [], [], []],\n      last_move: undefined,\n      active_player: 0,\n      winner: undefined,\n      next_game_id: undefined,\n    };\n  }\n\n  static defineColors(game: Game, cardIdx: number): Color[] {\n    const color = ALL_CARDS[cardIdx].color;\n    switch (color) {\n      case Color.BLUE:\n      case Color.GREEN:\n      case Color.PURPLE:\n      case Color.RED:\n      case Color.YELLOW:\n        const fieldAndPos = GameEngine.findPosition(game, color);\n        if (fieldAndPos[0] === 0 && ALL_CARDS[cardIdx].distance < 0) {\n          console.log(`Can't move back ${color}`);\n          return [];\n        }\n        return [color];\n      case Color.ANY:\n        let colors = [Color.BLUE, Color.GREEN, Color.PURPLE, Color.RED, Color.YELLOW];\n        if (ALL_CARDS[cardIdx].distance < 0) {\n          colors = colors.filter((c) => game.board[0].indexOf(c) === -1);\n        }\n        return colors;\n      case Color.LAST:\n        return [...game.board.find((f) => f.length > 0)];\n    }\n    throw new Error(`Unsupported color ${color}`);\n  }\n\n  // color should be well defined\n  static playCard(game: Game, cardIdx: number, color: Color) {\n    if (game.winner) {\n      throw new Error(`Can't play anymore, ${game.winner} has won`);\n    }\n    GameEngine.makeMove(game, ALL_CARDS[cardIdx].distance, color);\n    GameEngine.useCard(game, cardIdx);\n    GameEngine.reshuffleIfNecessary(game);\n    // tslint:disable-next-line: no-unused-expression\n    GameEngine.gameOver(game) || GameEngine.nextPlayer(game);\n    console.log(game);\n  }\n\n  static makeMove(game: Game, distance: number, color: Color) {\n    const fieldAndPos = GameEngine.findPosition(game, color);\n    const field = fieldAndPos[0];\n    const pos = fieldAndPos[1];\n\n    // On start turtles are not stacked\n    const stackSize = field === 0 ? 1 : game.board[field].length - pos;\n    // We can't jump out of the board\n    const landingField = Math.min(field + distance, game.board.length - 1);\n    if (landingField < 0) {\n      throw new Error(`Can't go back, already on the first field`);\n    }\n    const landingPos = game.board[landingField].length;\n\n    const stack = game.board[field].splice(pos, stackSize);\n    game.board[landingField] = game.board[landingField].concat(stack);\n\n    console.log(`moved ${stackSize} from ${field} to ${landingField}`);\n    console.log(game);\n    game.last_move = { color, start: fieldAndPos, end: [landingField, landingPos] };\n  }\n\n  static useCard(game: Game, cardIdx: number) {\n    const player = game.players[game.active_player];\n    console.log(player);\n    // TODO map vs dict\n    const handIdx = game.hands[player].findIndex((i) => i === cardIdx);\n    if (handIdx === -1) {\n      throw new Error(`Invalid move, ${ALL_CARDS[cardIdx]} not found for ${player}`);\n    }\n    game.discarded.push(game.hands[player].splice(handIdx, 1)[0]);\n    game.hands[player].push(game.deck.pop());\n  }\n\n  static reshuffleIfNecessary(game: Game): boolean {\n    if (game.deck.length === 0) {\n      game.deck = game.discarded;\n      GameEngine.shuffle(game.deck);\n      game.discarded = [];\n      return true;\n    }\n    return false;\n  }\n\n  static gameOver(game: Game): boolean {\n    if (game.board[game.board.length - 1].length === 0) {\n      return false;\n    }\n    for (let field = game.board.length - 1; field >= 0; field--) {\n      for (const color of game.board[field]) {\n        const player: string = Object.keys(game.colors).find((p) => game.colors[p] === color);\n        if (player) {\n          game.winner = player;\n          console.log(`${player} won!`);\n          return true;\n        }\n      }\n    }\n    throw new Error(`Invalid board, reached last field but no winner found`);\n  }\n\n  static nextPlayer(game: Game) {\n    game.active_player = (game.active_player + 1) % game.players.length;\n  }\n\n  static findPosition(game: Game, color: Color) {\n    let field = 0;\n    let pos = 0;\n    for (field = 0; field < game.board.length; field++) {\n      for (pos = 0; pos < game.board[field].length; pos++) {\n        if (game.board[field][pos] === color) {\n          return [field, pos];\n        }\n      }\n    }\n    console.log(game);\n    throw new Error(`Invalid board, ${color} not found`);\n  }\n\n  static shuffle<T>(a: T[]): T[] {\n    for (let i = a.length; i; i--) {\n      const j = Math.floor(Math.random() * i);\n      const x = a[i - 1];\n      a[i - 1] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Color } from '../game';\nimport { ImageService } from '../image.service';\n\n@Component({\n  selector: 'app-game-over',\n  templateUrl: './game-over.component.html',\n  styleUrls: ['./game-over.component.css']\n})\nexport class GameOverComponent implements OnInit {\n  @Input() winner: string;\n  @Input() color: Color;\n\n  constructor(public activeModal: NgbActiveModal, private imageService: ImageService) {}\n\n  ngOnInit() {}\n\n  turtleCardSrc(): string {\n    return this.imageService.getTurtleCardPath(this.color);\n  }\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title\">Koniec gry</h4>\n  <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</div>\n\n<div class=\"modal-body\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <p>Wygrał {{ winner }}!</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\"></div>\n      <div class=\"col-4\">\n        <img src=\"{{ turtleCardSrc() }}\" class=\"turtlecard\" />\n      </div>\n      <div class=\"col\"></div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-secondary\" (click)=\"activeModal.close('onemore')\">\n      Jeszcze raz!\n    </button>\n    <button class=\"btn btn-primary\" (click)=\"activeModal.close('OK')\">\n      OK\n    </button>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of, timer, Subject, EMPTY, throwError } from 'rxjs';\nimport { catchError, map, tap, switchMap, distinctUntilChanged, shareReplay } from 'rxjs/operators';\n\nimport { Game, Color } from './game';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameService {\n  // private gamesUrl = 'https://turtles-server--piotrholubowicz.repl.co/games/'; // URL to web api\n  private gamesUrl = 'https://turtles-server.herokuapp.com/games'; // URL to web api\n  private cache: { [url: string]: string } = {}; // url => etag\n\n  private headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n  constructor(private http: HttpClient) {}\n\n  /** GET games from the server */\n  getGames(): Observable<Game[]> {\n    const url = this.gamesUrl;\n    delete this.cache[url];\n    return timer(0, 1000).pipe(\n      switchMap((_) => this.fetchUrl<Game[]>(url, 'getGames')), // a new http request on every tick\n      shareReplay({\n        bufferSize: 1,\n        refCount: true,\n      }) // create a new Subject, which will act as a proxy\n    );\n  }\n\n  /** GET game by id. Will 404 if id not found */\n  getGame(id: number): Observable<Game> {\n    const url = `${this.gamesUrl}/${id}`;\n    delete this.cache[url];\n    return timer(0, 1000).pipe(\n      switchMap((_) => this.fetchUrl<Game>(url, `getGame id=${id}`)), // a new http request on every tick\n      shareReplay({\n        bufferSize: 1,\n        refCount: true,\n      }) // create a new Subject, which will act as a proxy\n    );\n  }\n\n  fetchUrl<T>(url: string, operation: string): Observable<T> {\n    const headers = this.cache[url] ? this.headers.set('If-None-Match', this.cache[url]) : this.headers;\n    return this.http\n      .get<T>(url, { observe: 'response', headers })\n      .pipe(\n        tap((resp) => (this.cache[url] = resp.headers.get('Etag'))),\n        map((resp) => resp.body),\n        catchError(this.handleError<T>(operation))\n      );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new game to the server */\n  addGame(game: Game, currentGame?: Game): Observable<Game> {\n    const url = currentGame ? `${this.gamesUrl}?prevGame=${currentGame.id}` : this.gamesUrl;\n    return this.http\n      .post<Game>(url, game, { headers: this.headers })\n      .pipe(\n        tap((newGame: Game) => console.log(`added game w/ id=${newGame.id}`)),\n        tap((g: Game) => console.log(g)),\n        catchError(this.handleError<Game>('addGame'))\n      );\n  }\n\n  /** DELETE: delete the game from the server */\n  deleteGame(game: Game | number): Observable<Game> {\n    const id = typeof game === 'number' ? game : game.id;\n    const url = `${this.gamesUrl}/${id}`;\n\n    return this.http\n      .delete<Game>(url, { headers: this.headers })\n      .pipe(\n        tap((_) => console.log(`deleted game id=${id}`)),\n        catchError(this.handleError<Game>('deleteHero'))\n      );\n  }\n\n  /** PUT: update the game on the server */\n  updateGame(game: Game): Observable<any> {\n    const url = `${this.gamesUrl}/${game.id}`;\n    console.log(game);\n    return this.http.put(url, game, { headers: this.headers }).pipe(\n      tap((_) => console.log(`updated game id=${game.id}`)),\n      catchError(this.handleError<any>('updateGame'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param fallback - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', fallback: Observable<T> = EMPTY) {\n    return (error: any): Observable<T> => {\n      if (error.status === 304) {\n        // This is working as intended\n        return fallback;\n      }\n      console.error(error); // log to console instead\n      console.log(`${operation} failed: ${error.message}`);\n      delete this.cache[error.url];\n      return throwError(error);\n    };\n  }\n}\n","export enum Color {\n  BLUE,\n  GREEN,\n  PURPLE,\n  RED,\n  YELLOW,\n  LAST,\n  ANY,\n}\n\nexport interface Card {\n  distance: number; // 1-2\n  color: Color;\n}\n\nexport interface Move {\n  color: Color;\n  start: number[];\n  end: number[];\n}\n\nexport interface Game {\n  id: number;\n  players: string[];\n  colors: { [id: string]: Color };\n  hands: { [id: string]: number[] };\n  deck: number[];\n  discarded: number[];\n  board: Color[][];\n  last_move: Move;\n  active_player: number;\n  winner: string;\n  next_game_id: number;\n}\n\nexport const ALL_CARDS = [\n  { distance: 1, color: Color.BLUE },\n  { distance: 1, color: Color.BLUE },\n  { distance: 1, color: Color.BLUE },\n  { distance: 1, color: Color.BLUE },\n  { distance: 1, color: Color.BLUE },\n  { distance: 2, color: Color.BLUE },\n  { distance: -1, color: Color.BLUE },\n  { distance: -1, color: Color.BLUE },\n\n  { distance: 1, color: Color.GREEN },\n  { distance: 1, color: Color.GREEN },\n  { distance: 1, color: Color.GREEN },\n  { distance: 1, color: Color.GREEN },\n  { distance: 1, color: Color.GREEN },\n  { distance: 2, color: Color.GREEN },\n  { distance: -1, color: Color.GREEN },\n  { distance: -1, color: Color.GREEN },\n\n  { distance: 1, color: Color.PURPLE },\n  { distance: 1, color: Color.PURPLE },\n  { distance: 1, color: Color.PURPLE },\n  { distance: 1, color: Color.PURPLE },\n  { distance: 1, color: Color.PURPLE },\n  { distance: 2, color: Color.PURPLE },\n  { distance: -1, color: Color.PURPLE },\n  { distance: -1, color: Color.PURPLE },\n\n  { distance: 1, color: Color.RED },\n  { distance: 1, color: Color.RED },\n  { distance: 1, color: Color.RED },\n  { distance: 1, color: Color.RED },\n  { distance: 1, color: Color.RED },\n  { distance: 2, color: Color.RED },\n  { distance: -1, color: Color.RED },\n  { distance: -1, color: Color.RED },\n\n  { distance: 1, color: Color.YELLOW },\n  { distance: 1, color: Color.YELLOW },\n  { distance: 1, color: Color.YELLOW },\n  { distance: 1, color: Color.YELLOW },\n  { distance: 1, color: Color.YELLOW },\n  { distance: 2, color: Color.YELLOW },\n  { distance: -1, color: Color.YELLOW },\n  { distance: -1, color: Color.YELLOW },\n\n  { distance: 1, color: Color.ANY },\n  { distance: 1, color: Color.ANY },\n  { distance: 1, color: Color.ANY },\n  { distance: 1, color: Color.ANY },\n  { distance: 1, color: Color.ANY },\n  { distance: -1, color: Color.ANY },\n  { distance: -1, color: Color.ANY },\n\n  { distance: 1, color: Color.LAST },\n  { distance: 1, color: Color.LAST },\n  { distance: 1, color: Color.LAST },\n  { distance: 2, color: Color.LAST },\n  { distance: 2, color: Color.LAST },\n];\n","import { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { GameService } from '../game.service';\nimport { Game } from '../game';\nimport { GameEngine } from '../game-engine';\n\n@Component({\n  selector: 'app-game-list',\n  templateUrl: './games.component.html',\n  styleUrls: ['./games.component.css'],\n})\nexport class GamesComponent implements OnInit {\n  games$: Observable<Game[]>;\n  message: string;\n\n  constructor(private service: GameService, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.games$ = this.route.paramMap.pipe(\n      switchMap((params) => {\n        this.message = params.get('message');\n        return this.service.getGames();\n      })\n    );\n  }\n\n  add(playersInput: string[]): void {\n    const players = playersInput.filter((input) => input !== '').map((input) => input.trim());\n    const game: Game = GameEngine.createGame(players);\n    if (game) {\n      this.service.addGame(game).subscribe();\n    }\n  }\n\n  delete(game: Game): void {\n    this.service.deleteGame(game).subscribe();\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <a href=\"/\"><img src=\"/assets/img/title.png\" /></a>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col\">\n      <p>Wybierz istniejącą grę lub stwórz nową.</p>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"row\">\n        <div class=\"col-10\">\n          <h2>Istniejące gry</h2>\n          <div *ngIf=\"(games$ | async)?.length > 0; else noGames\">\n            <div\n              *ngFor=\"let game of games$ | async\"\n              class=\"btn-group\"\n              role=\"group\"\n              style=\"width: 100%; margin-top: 5%;\"\n            >\n              <div class=\"input-group-prepend\">\n                <div class=\"input-group-text\">{{ game.id }}</div>\n              </div>\n              <button type=\"button\" class=\"btn btn-light game\" [routerLink]=\"['/board', game.id]\" style=\"width: 80%;\">\n                {{ game.players.join(', ') }}\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary\" title=\"delete game\" (click)=\"delete(game)\">x</button>\n            </div>\n          </div>\n          <ng-template #noGames>\n            <p>Nie ma gier.</p>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-6\">\n      <h2>Nowa gra</h2>\n      <form>\n        <div class=\"form-group row\">\n          <label class=\"col-2 col-form-label\">Gracz 1</label>\n          <div class=\"col-10\">\n            <input class=\"form-control\" #player1 />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"col-2 col-form-label\">Gracz 2</label>\n          <div class=\"col-10\">\n            <input class=\"form-control\" #player2 />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"col-2 col-form-label\">Gracz 3</label>\n          <div class=\"col-10\">\n            <input class=\"form-control\" #player3 />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"col-2 col-form-label\">Gracz 4</label>\n          <div class=\"col-10\">\n            <input class=\"form-control\" #player4 />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label class=\"col-2 col-form-label\">Gracz 5</label>\n          <div class=\"col-10\">\n            <input class=\"form-control\" #player5 />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <!-- (click) passes input value to add() and then clears the input -->\n          <button\n            type=\"submit\"\n            class=\"btn btn-light\"\n            (click)=\"\n              add([player1.value, player2.value, player3.value, player4.value, player5.value]);\n              player1.value = '';\n              player2.value = '';\n              player3.value = '';\n              player4.value = '';\n              player5.value = ''\n            \"\n          >\n            Nowa gra\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col\">\n      <h2>Reguły</h2>\n    </div>\n  </div>\n</div>\n\n<!-- <div *ngIf=\"message\" class=\"alert alert-warning\">{{ message }}</div> -->\n","import { Injectable } from '@angular/core';\n\nimport { Card, Color } from './game';\n\n@Injectable()\nexport class ImageService {\n  private PREFIX = '/assets/img';\n  // private PREFIX = 'https://raw.githubusercontent.com/piotrholubowicz/turtles/master/src/assets/img';\n\n  constructor() {}\n\n  getMoveCardPath(card?: Card): string {\n    if (!card) {\n      return `${this.PREFIX}/card-back.png`;\n    }\n    const color = Color[card.color].toLowerCase();\n    const sign = card.distance === -1 ? 'minus' : card.distance === 2 ? 'plusplus' : 'plus';\n    return `${this.PREFIX}/card-${color}-${sign}.png`;\n  }\n\n  getTurtleCardPath(color?: Color): string {\n    const which = color !== undefined ? Color[color].toLowerCase() : 'back';\n    return `${this.PREFIX}/turtle-card-${which}.png`;\n  }\n\n  getTurtlePath(color: Color): string {\n    return `${this.PREFIX}/meeple-${Color[color].toLowerCase()}.png`;\n  }\n}\n","import { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { Game } from './game';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const games = [];\n    console.log('created the db');\n    return { games };\n  }\n\n  // Overrides the genId method to ensure that a game always has an id.\n  // If the games array is empty, the method below returns the initial number (11).\n  // If the games array is not empty, the method below returns the highest\n  // game id + 1.\n  genId(games: Game[]): number {\n    return games.length > 0 ? Math.max(...games.map(game => game.id)) + 1 : 100;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <a href=\"/\"><img src=\"/assets/img/title.png\"/></a>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col\">\n      Ups, nic tu nie ma!\n    </div>\n  </div>\n</div>\n","import { Observable, of, merge, timer } from 'rxjs';\nimport { switchMap, catchError, tap } from 'rxjs/operators';\n\nimport { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router, ParamMap } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Game, Color, ALL_CARDS } from '../game';\nimport { GameService } from '../game.service';\nimport { GameEngine } from '../game-engine';\nimport { ImageService } from '../image.service';\nimport { ColorPickerDialogComponent } from '../color-picker-dialog/color-picker-dialog.component';\n\n@Component({\n  selector: 'app-player',\n  templateUrl: './player.component.html',\n  styleUrls: ['./player.component.css'],\n})\nexport class PlayerComponent implements OnInit {\n  game$: Observable<Game>;\n  turtleCardSrc$: Observable<string>;\n  player: string;\n  ColorT = Color;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private service: GameService,\n    private modalService: NgbModal,\n    private imageService: ImageService\n  ) {}\n\n  ngOnInit(): void {\n    this.game$ = this.route.paramMap.pipe(\n      switchMap((params: ParamMap) => {\n        this.player = params.get('player');\n        return this.service.getGame(+params.get('id')).pipe(\n          tap((game) => {\n            if (game.next_game_id) {\n              this.router.navigate(['/hand', game.next_game_id, this.player]);\n            }\n          }),\n          catchError((err) => {\n            if (err.status === 404) {\n              this.router.navigate(['/games', { message: 'Nie ma takiej gry!' }]);\n            }\n            console.log(`Error ${err.status}`);\n            return this.game$;\n          })\n        );\n      })\n    );\n    this.turtleCardSrc$ = of(this.turtleCardSrc());\n  }\n\n  onPlayed(event: any) {\n    const colorOptions: Color[] = GameEngine.defineColors(event.game, event.cardIdx);\n    if (colorOptions.length === 0) {\n      this.cantPlayCard();\n    } else if (colorOptions.length > 1) {\n      this.pickOneColor(colorOptions)\n        .then((result) => {\n          this.playTheCard(event.game, event.cardIdx, +result.color);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    } else {\n      this.playTheCard(event.game, event.cardIdx, colorOptions[0]);\n    }\n  }\n\n  cantPlayCard() {}\n\n  pickOneColor(colorOptions: Color[]): Promise<any> {\n    const modalRef = this.modalService.open(ColorPickerDialogComponent);\n    modalRef.componentInstance.colors = colorOptions;\n    return modalRef.result;\n  }\n\n  playTheCard(game: Game, cardIdx: number, color: Color) {\n    GameEngine.playCard(game, cardIdx, color);\n    console.log(`${this.player} plays ${JSON.stringify(ALL_CARDS[cardIdx])}`);\n    this.service.updateGame(game).subscribe();\n  }\n\n  turtleCardSrc(color?: Color): string {\n    return this.imageService.getTurtleCardPath(color);\n  }\n\n  showTurtleCard(color: Color) {\n    this.turtleCardSrc$ = merge(\n      of(this.turtleCardSrc(color)),\n      timer(2000).pipe(switchMap((_) => of(this.turtleCardSrc())))\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <a href=\"/\"><img src=\"/assets/img/title.png\" /></a>\n    </div>\n  </div>\n  <div *ngIf=\"game$ | async as game\">\n    <div class=\"row top-row\">\n      <div class=\"col-10\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <p class=\"players\">\n              <span *ngFor=\"let p of game.players\" [ngClass]=\"{ active_player: game.players[game.active_player] == p }\"\n                >{{ p }}<span *ngIf=\"player == p\"> (Ty)</span>,\n              </span>\n            </p>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col\"></div>\n          <div class=\"col-3\">\n            <img src=\"/assets/img/gameover.png\" *ngIf=\"game.winner; else yourturn\" class=\"img-fluid\" />\n            <ng-template #yourturn>\n              <img\n                src=\"/assets/img/yourturn.png\"\n                *ngIf=\"player == game.players[game.active_player]\"\n                class=\"img-fluid\"\n              />\n            </ng-template>\n          </div>\n          <div class=\"col\"></div>\n        </div>\n      </div>\n      <div class=\"col-2\">\n        <img src=\"{{ turtleCardSrc$ | async }}\" (click)=\"showTurtleCard(game.colors[player])\" class=\"turtlecard\" />\n        <p class=\"turtlecard\">Kliknij mnie</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div *ngFor=\"let card of game.hands[player]\" class=\"col\">\n        <app-card\n          [cardIdx]=\"card\"\n          [game]=\"game\"\n          [enabled]=\"game.players[game.active_player] == player\"\n          (played)=\"onPlayed($event)\"\n        ></app-card>\n      </div>\n    </div>\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}